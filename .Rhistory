roxygen2
install.packages("roxygen2")
library(TempClim)
devtools::document()
devtools::document()
require("devtools")
devtools::document()
install("devtools")
install.packages("devtools")
require("devtools")
devtools::document()
devtools::document()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
devtools::document()
library(TempClim)
GUI()
}
GUI<-function(){options(repos="https://cran.rstudio.com" )
#check.packages <- function(pkg){ #check on the packages that are required by the function
#  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
#  if (length(new.pkg))
#    install.packages(new.pkg, dependencies = TRUE)
#  sapply(pkg, require, character.only = TRUE)
#}
#check.packages("astsa")
#check.packages("zoo")
#check.packages("quantmod")
#check.packages("tseries")
#check.packages("forecast")
#check.packages("aTSA")
#check.packages("shiny")
#check.packages("bigmemory")
#check.packages("shinythemes")
#check.packages("ggplot2")
#check.packages("gridExtra")
#check.packages("lattice")
#library(astsa)
#library(zoo)
#library(quantmod)
#library(tseries)
#library(forecast)
#library(aTSA)
#library(shiny)
#library(bigmemory)
#library(shinythemes)
#library(ggplot2)
#library(gridExtra)
#library(lattice)
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
colnames(matrix) <- c("BP","Temperature","CO2","MIL")
library(shiny)
ui <- fluidPage(titlePanel("Climate Data"),#preparation of the panels for shiny app
sidebarLayout(
sidebarPanel(selectInput("Plot_input", "Data Plotted",choices = c("Temperature", "CO2", "MIL")),
selectInput("Color_input", "Color",choices = c("Red", "Blue", "Green")),
radioButtons("Size_input","Select Option",choices = c("1.5","2","2.5","3"),selected = "2"),
sliderInput("lag1", "Number of lag:",min = 40, max = 1000, value = 40),
sliderInput("lag2", "Number of lag:",min = 0, max = 10000, value = 1000),
selectInput("Fit_data", "Fit ARIMA",choices = c("Temperature_FIT", "CO2_FIT", "MIL_FIT")),
sliderInput("ARp", "Autoregressive p",min = 0, max = 100, value = 0),
sliderInput("MAq", "Moving Average q",min = 0, max = 100, value = 0),
sliderInput("I", "Integration order",min = 0, max = 5, value = 0),
selectInput("GR1", "Engle-Granger Cointegration Test X",choices = c("Temperature", "CO2", "MIL")),
selectInput("GR2", "Engle-Granger Cointegration Test Y",choices = c("Temperature", "CO2", "MIL")),
uiOutput("filter_degree")
),
mainPanel(plotOutput("coolplot"), #plots that has to be loaded on the app
plotOutput("coolplot2"),
plotOutput("coolplot3"),
plotOutput("coolplot4"),
))
)
server <- function(input, output, session) {
colour <-"red" #set of reactive variables that allows the user to choose what he would analyse
cor<-reactive({input$"Color_input"
})
size<-reactive({input$"Size_input"
})
lag_1<-reactive({input$"lag1"
})
lag_2<-reactive({input$"lag2"
})
AR_p<-reactive({input$"ARp"
})
MA_q<-reactive({input$"MAq"
})
I_O<-reactive({input$"I"
})
Fit_set<-reactive({input$"Fit_data"
if (input$"Fit_data"=="CO2_FIT"){
CO2_FIT<-arima(matrix[,"CO2"],order=c(AR_p(),I_O(),MA_q()))}
else if (input$"Fit_data"=="Temperature_FIT"){
Temperature_FIT <- arima(matrix[,"Temperature"],order=c(AR_p(),I_O(),MA_q()))}
})
G_1<-reactive({input$"GR1"
})
G_2<-reactive({input$"GR2"
granger<-coint.test(matrix[,G_1()], matrix[,G_2()], d = 0, nlag = NULL, output = TRUE) #granger causality test, to be done
})
output$coolplot <- renderPlot( #plot of the data choosen by the user on the panels
plot(matrix[,"BP"],matrix[,input$"Plot_input"],col = cor(),type = "l",xlab="Years BP",ylab=input$"Plot_input",cex.lab=1.3,lwd=size()),
)
output$coolplot2 <- renderPlot(
pacf(matrix[,input$"Plot_input"],lag.max = lag_1(),na.action = na.pass,main="partial Autocorrelation"),
)
output$coolplot3 <- renderPlot(
acf(matrix[,input$"Plot_input"],lag.max = lag_2(),na.action = na.pass,main="Autocorrelation"),
)
output$coolplot4<- renderPlot(
checkresiduals(Fit_set()),
)
}
shinyApp(ui = ui, server = server)
}
library(TempClim)
GUI<-function(){options(repos="https://cran.rstudio.com" )
#check.packages <- function(pkg){ #check on the packages that are required by the function
#  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
#  if (length(new.pkg))
#    install.packages(new.pkg, dependencies = TRUE)
#  sapply(pkg, require, character.only = TRUE)
#}
#check.packages("astsa")
#check.packages("zoo")
#check.packages("quantmod")
#check.packages("tseries")
#check.packages("forecast")
#check.packages("aTSA")
#check.packages("shiny")
#check.packages("bigmemory")
#check.packages("shinythemes")
#check.packages("ggplot2")
#check.packages("gridExtra")
#check.packages("lattice")
#library(astsa)
#library(zoo)
#library(quantmod)
#library(tseries)
#library(forecast)
#library(aTSA)
#library(shiny)
#library(bigmemory)
#library(shinythemes)
#library(ggplot2)
#library(gridExtra)
#library(lattice)
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
colnames(matrix) <- c("BP","Temperature","CO2","MIL")
library(shiny)
ui <- fluidPage(titlePanel("Climate Data"),#preparation of the panels for shiny app
sidebarLayout(
sidebarPanel(selectInput("Plot_input", "Data Plotted",choices = c("Temperature", "CO2", "MIL")),
selectInput("Color_input", "Color",choices = c("Red", "Blue", "Green")),
radioButtons("Size_input","Select Option",choices = c("1.5","2","2.5","3"),selected = "2"),
sliderInput("lag1", "Number of lag:",min = 40, max = 1000, value = 40),
sliderInput("lag2", "Number of lag:",min = 0, max = 10000, value = 1000),
selectInput("Fit_data", "Fit ARIMA",choices = c("Temperature_FIT", "CO2_FIT", "MIL_FIT")),
sliderInput("ARp", "Autoregressive p",min = 0, max = 100, value = 0),
sliderInput("MAq", "Moving Average q",min = 0, max = 100, value = 0),
sliderInput("I", "Integration order",min = 0, max = 5, value = 0),
selectInput("GR1", "Engle-Granger Cointegration Test X",choices = c("Temperature", "CO2", "MIL")),
selectInput("GR2", "Engle-Granger Cointegration Test Y",choices = c("Temperature", "CO2", "MIL")),
uiOutput("filter_degree")
),
mainPanel(plotOutput("coolplot"), #plots that has to be loaded on the app
plotOutput("coolplot2"),
plotOutput("coolplot3"),
plotOutput("coolplot4"),
))
)
server <- function(input, output, session) {
colour <-"red" #set of reactive variables that allows the user to choose what he would analyse
cor<-reactive({input$"Color_input"
})
size<-reactive({input$"Size_input"
})
lag_1<-reactive({input$"lag1"
})
lag_2<-reactive({input$"lag2"
})
AR_p<-reactive({input$"ARp"
})
MA_q<-reactive({input$"MAq"
})
I_O<-reactive({input$"I"
})
Fit_set<-reactive({input$"Fit_data"
if (input$"Fit_data"=="CO2_FIT"){
CO2_FIT<-arima(matrix[,"CO2"],order=c(AR_p(),I_O(),MA_q()))}
else if (input$"Fit_data"=="Temperature_FIT"){
Temperature_FIT <- arima(matrix[,"Temperature"],order=c(AR_p(),I_O(),MA_q()))}
})
G_1<-reactive({input$"GR1"
})
G_2<-reactive({input$"GR2"
granger<-coint.test(matrix[,G_1()], matrix[,G_2()], d = 0, nlag = NULL, output = TRUE) #granger causality test, to be done
})
output$coolplot <- renderPlot( #plot of the data choosen by the user on the panels
plot(matrix[,"BP"],matrix[,input$"Plot_input"],col = cor(),type = "l",xlab="Years BP",ylab=input$"Plot_input",cex.lab=1.3,lwd=size()),
)
output$coolplot2 <- renderPlot(
pacf(matrix[,input$"Plot_input"],lag.max = lag_1(),na.action = na.pass,main="partial Autocorrelation"),
)
output$coolplot3 <- renderPlot(
acf(matrix[,input$"Plot_input"],lag.max = lag_2(),na.action = na.pass,main="Autocorrelation"),
)
output$coolplot4<- renderPlot(
checkresiduals(Fit_set()),
)
}
shinyApp(ui = ui, server = server)
}
GUI()
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
GUI()
library(forecast)
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
library(TempClim)
ui <- fluidPage(titlePanel("Climate Data"),#preparation of the panels for shiny app
sidebarLayout(
sidebarPanel(selectInput("Plot_input", "Data Plotted",choices = c("Temperature", "CO2", "MIL")),
selectInput("Color_input", "Color",choices = c("Red", "Blue", "Green")),
radioButtons("Size_input","Select Option",choices = c("1.5","2","2.5","3"),selected = "2"),
sliderInput("lag1", "Number of lag:",min = 40, max = 1000, value = 40),
sliderInput("lag2", "Number of lag:",min = 0, max = 10000, value = 1000),
selectInput("Fit_data", "Fit ARIMA",choices = c("Temperature_FIT", "CO2_FIT", "MIL_FIT")),
sliderInput("ARp", "Autoregressive p",min = 0, max = 100, value = 0),
sliderInput("MAq", "Moving Average q",min = 0, max = 100, value = 0),
sliderInput("I", "Integration order",min = 0, max = 5, value = 0),
selectInput("GR1", "Engle-Granger Cointegration Test X",choices = c("Temperature", "CO2", "MIL")),
selectInput("GR2", "Engle-Granger Cointegration Test Y",choices = c("Temperature", "CO2", "MIL")),
uiOutput("filter_degree")
),
mainPanel(plotOutput("coolplot"), #plots that has to be loaded on the app
plotOutput("coolplot2"),
plotOutput("coolplot3"),
plotOutput("coolplot4"),
))
)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/R/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
matrix <- read.csv("https://raw.githubusercontent.com/unimi-dse/7a34747f/master/R/Epica-tpt-co2x.csv",header=TRUE,skip=4) #load data from the website on git hub
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
source('~/Desktop/Clim_Temp/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
sampleGUI()
library(TempClim)
library(TempClim)
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
library(TempClim)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
sampleGUI(
library(TempClim)
sampleGUI()
library(TempClim)
require(TempClim)
sampleGUI()
library(TempClim)
require(TempClim)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
sampleGUI()
library(TempClim)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
library(TempClim)
sampleGUI()
library(TempClim)
require(TempClim)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
50
51
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
sampleGUI()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(forecast)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
library(TempClim)
library(TempClim)
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
View(GUI)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUI()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUIC()
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUIC()
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
library(TempClim)
library(TempClim)
library(TempClim)
source('~/Desktop/Test/TempClim/R/XappDEF.R', echo=TRUE)
GUIC()
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
library(TempClim)
devtools::document()
library(TempClim)
roxygen2::roxygenise()
library(TempClim)
library(TempClim2)
library(TempClim2)
library(TempClim2)
source('~/Desktop/Project2/R/XappDEF.R', echo=TRUE)
library(TempClim2)
